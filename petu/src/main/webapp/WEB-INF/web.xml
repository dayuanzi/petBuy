<?xml version="1.0" encoding="utf-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">


	<!-- 使用ContextLoaderListener初始化Spring容器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>
	<!-- 配置Spring配置文件的位置 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml,classpath:daoContext.xml,
			classpath:spring-security.xml</param-value>
	</context-param>



	<!-- Spring字符编码过滤器 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value><!-- 强制进行转码 -->
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!--配置SpringSecurity filter，让SpringSecurity先加载，防止SpringSecurity拦截失效 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 防止spring内存溢出监听器 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	
	<!-- Spring托管session的过滤器 -->
	<filter>     
	<filter-name>hibernateFilter</filter-name> 
	<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class> -->
	<!-- singleSession默认为true,若设为false则等于没用OpenSessionInView --> 
   <init-param> 
	<param-name>singleSession</param-name>  
	<param-value>true</param-value>
	</init-param>    
	<!-- <init-param>  
    <param-name>flushMode</param-name>  
    <param-value>AUTO</param-value>  
	</init-param>      -->
	</filter>
    <filter-mapping>
        <filter-name>hibernateFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- remember me过滤器 -->
	<filter>
		<filter-name>authenticationFilter</filter-name>
		<filter-class>com.keemo.petstore.security.filter.authenticationFilter</filter-class>
		<init-param>
			<param-name>loginStr</param-name><!-- 对登录页面不进行过滤 -->
			<param-value>/index.jsp;login.do;/success.jsp</param-value>
		</init-param>
		<init-param>
			<param-name>filterStr</param-name><!-- 只对指定过滤参数后缀进行过滤 -->
			<param-value>.do;.jsp</param-value>
		</init-param>
		<init-param>
			<param-name>redirectPath</param-name><!-- 未通过跳转到登录界面 -->
			<param-value>/login.jsp</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>authenticationFilter</filter-name>
		<url-pattern>/order/*</url-pattern>
	</filter-mapping>
	


	<!-- 定义Struts 2的核心Filter -->
	<filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
	<!-- 让Struts 2的核心Filter拦截所有请求 -->
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- 定义Web应用的首页 -->
	<welcome-file-list>
		<welcome-file>IndexAction.do</welcome-file>
	</welcome-file-list>
</web-app>

