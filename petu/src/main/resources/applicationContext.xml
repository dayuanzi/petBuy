<?xml version="1.0" encoding="GBK"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 定义数据源Bean，使用C3P0数据源实现 -->
	<!-- 设置连接数据库的驱动、URL、用户名、密码
		连接池最大连接数、最小连接数、初始连接数等参数 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close"
		p:driverClass="com.mysql.jdbc.Driver"
		p:jdbcUrl="jdbc:mysql://localhost:3306/petbuy?useUnicode=true&amp;characterEncoding=utf8"
		p:user="root"
		p:password="zsy"
		p:maxPoolSize="40"
		p:minPoolSize="1"
		p:initialPoolSize="1"
		p:maxIdleTime="20"/>

	<!-- 定义Hibernate的SessionFactory -->
	<!-- 依赖注入数据源，注入正是上面定义的dataSource -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="mappingResources">
			<list>
				<!-- 以下用来列出Hibernate映射文件 -->
				<value>com/keemo/petstore/bean/Admin.hbm.xml</value>
				<value>com/keemo/petstore/bean/Cat.hbm.xml</value>
				<value>com/keemo/petstore/bean/Cattery.hbm.xml</value>
				<value>com/keemo/petstore/bean/Catype.hbm.xml</value>
				<value>com/keemo/petstore/bean/Rank.hbm.xml</value>
				<value>com/keemo/petstore/bean/Region.hbm.xml</value>
				<value>com/keemo/petstore/bean/Cattpetrank.hbm.xml</value>
				<value>com/keemo/petstore/bean/Order.hbm.xml</value>
				<value>com/keemo/petstore/bean/Cart.hbm.xml</value>
				<value>com/keemo/petstore/bean/Follow.hbm.xml</value>
			</list>
		</property>
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<!-- 指定数据库方言、是否自动建表
				是否生成SQL语句等 	-->
			<value>
			hibernate.dialect=org.hibernate.dialect.MySQLInnoDBDialect
			hibernate.hbm2ddl.auto=update
			hibernate.show_sql=true
			hibernate.format_sql=true
			#开启二级缓存
			hibernate.cache.use_second_level_cache=false
			#设置二级缓存的提供者
			#hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
			</value>
		</property>
	</bean>
	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现-->
	<!-- 并注入SessionFactory的引用 -->
	<bean id="transactionManager" class=
		"org.springframework.orm.hibernate3.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory"/>
		
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<!-- 所有以'get'开头的方法是read-only的 -->
			<tx:method name="get*" read-only="true"/>
			<!-- 其他方法使用默认的事务设置 -->
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配admManager
			两个Bean的所有方法的执行 -->
		<aop:pointcut id="leePointcut"

			expression="bean(admManager)||bean(memManager)||bean(loginManager)"/>

		<!-- 指定在leePointcut切入点应用txAdvice事务增强处理 -->
		<aop:advisor advice-ref="txAdvice" 
			pointcut-ref="leePointcut"/>
	</aop:config>

	<!-- 定义业务逻辑组件模板 -->
	<!-- 为之注入DAO组件 -->

	<bean id="adminManagerTemplate" abstract="true" lazy-init="true"
		p:adminDao-ref="adminDao"
		p:catDao-ref="catDao"
		p:catteryDao-ref="catteryDao"
		p:cartDao-ref="cartDao"/>
	
	<bean id="memberManagerTemplate" abstract="true" lazy-init="true"
		p:orderDao-ref="orderDao"
		p:cartDao-ref="cartDao"
		p:followDao-ref="followDao"/>
		
	<bean id="loginManagerTemplate" abstract="true" lazy-init="true"
		p:adminDao-ref="adminDao"
	/>
	 
		


	<!-- 定义两个业务逻辑组件，继承业务逻辑组件的模板 -->

	<bean id="admManager" name="admManager"
		class="com.keemo.petstore.service.impl.AdmManagerImpl"
		parent="adminManagerTemplate"/>

    <bean id="memManager" name="memManager"
		class="com.keemo.petstore.service.impl.MemManagerImpl"
		parent="memberManagerTemplate"/>

    <bean id="loginManager" name="loginManager"
		class="com.keemo.petstore.service.impl.UserLoginServiceImpl"
		parent="loginManagerTemplate"/>
 
     <bean id="emailManager" name="emailManager"
		class="com.keemo.petstore.service.impl.EmailVerificationCodeServiceImpl" >
		<property name="adminDao" ref="adminDao"/>
		<property name="sendEmail" ref="sendEmail"/>
    </bean>
  
  
  
  
     <bean id="sendEmail" name="sendEmail"
		class="com.keemo.petstore.util.SendEmail" >
    </bean>
    
    
    
	<!--定义Spring的事务拦截器TransactionInterceptor -->
	<!-- <bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor"> -->
		<!-- 依赖注入上面定义的事务管理器transactionManager 
		<property name="transactionManager" ref="transactionManager" />-->
		<!-- 定义需要进行事务拦截的方法及所采用的事务控制类型
		<property name="transactionAttributes">
			<props>
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="execute*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>



	<aop:config>
		<aop:pointcut id="bussinessService"
			expression="execution(public 
		* com.petu.webapp.service..*.*(..))" />
		<aop:advisor pointcut-ref="bussinessService" advice-ref="transactionInterceptor" />
	</aop:config> -->
</beans>
